@use 'sass:map';
@use '@material/theme/theme' as mdc-theme;
@use '@material/typography/typography' as mdc-typography;
@use '../field/variables' as field-variables;
@use './variables';

// Root
@mixin root-core {
  display: flex;
  box-sizing: border-box;
}

@mixin root-min-height($layout-state, $orientation-state) {
  // Single Line
  @if $orientation-state == single-line {
    min-height: map.get(field-variables.$field, height, dense);
  }
  @else if $orientation-state == default {
    // Default
    @if $layout-state == default {
      min-height: map.get(field-variables.$field, height, default);
    }
    // Roomy
    @else if $layout-state == roomy {
      min-height: map.get(field-variables.$field, height, roomy);
    }
    // Dense
    @else if $layout-state == dense {
      // Field doesn't use label when dense so we use default height when dense for default orientation.
      min-height: map.get(field-variables.$field, height, default);
    }
  }
  @include _error-orientation-state(root-min-height, $orientation-state);
  @include _error-layout-state(root-min-height, $layout-state);
}

@mixin root-padding-top($layout-state) {
  // Default
  @if $layout-state == default {
    padding-top: map.get(variables.$root, padding, top, default);
  }
  // Roomy
  @else if $layout-state == roomy {
    padding-top: map.get(variables.$root, padding, top, roomy);
  }
  @include _error-layout-state(root-padding-top, $layout-state);
}

// Icon Container

@mixin icon-container-core {
  display: flex;
  align-items: flex-start;
}

// Container

@mixin container-orientation($orientation-state) {
  // Default
  @if $orientation-state == default {
    display: flex;
    flex-direction: column;
    align-items: flex-start;
  }
  // Single Line
  @else if $orientation-state == single-line {
    display: flex;
    flex-direction: row;
    align-items: center;
  }
  @include _error-orientation-state(container-orientation, $orientation-state);
}

@mixin container-align($align-state) {
  // Left
  @if $align-state == left {
    align-items: flex-start;
  }
  // Center
  @else if $align-state == center {
    align-items: center;
  }
  // Right
  @else if $align-state == right {
    align-items: flex-end;
  }
  @include _error-align-state(root-align, $align-state);
}

@mixin container-ellipsis {
  overflow: hidden;
}

// Icon
@mixin icon-core {
  @include mdc-theme.property(color, text-primary-on-background);

  font-size: 1.25rem !important;
  margin-right: 8px;
}

// Label
@mixin label-core {
  @include mdc-typography.typography(subtitle1, $exclude-props: (line-height, font-size));
  line-height: 1rem;
  @include mdc-theme.property(color, text-secondary-on-background);
}

@mixin label-font-size($layout-state, $orientation-state) {
  // Default, Dense or Single Line
  @if $orientation-state == single-line or $layout-state == default or $layout-state == dense {
    font-size: map.get(field-variables.$label, font-size, default);
  }
  // Roomy
  @else if $layout-state == roomy and $orientation-state != single-line {
    font-size: map.get(field-variables.$label, font-size, roomy);
  }
  @include _error-layout-state(label-font-size, $layout-state);
  @include _error-orientation-state(label-margin-right, $orientation-state);
}

@mixin label-transform($layout-state) {
  // Default
  @if $layout-state == default or $layout-state == dense {
    transform:
      translateX(map.get(variables.$label, transform, translate, x, default))
      translateY(map.get(variables.$label, transform, translate, y, default))
      scale(map.get(field-variables.$label, float-scale, default));
  }
  // Roomy
  @else if $layout-state == roomy {
    transform:
    translateX(map.get(variables.$label, transform, translate, x, roomy))
    translateY(map.get(variables.$label, transform, translate, y, roomy))
      scale(map.get(field-variables.$label, float-scale, default));
  }
  @include _error-layout-state(label-transform, $layout-state);
}

@mixin label-margin-bottom($layout-state) {
  // Default
  @if $layout-state == default or $layout-state == dense {
    margin-bottom: map.get(variables.$label, margin, bottom, default);
  }
  // Roomy
  @else if $layout-state == roomy {
    margin-bottom: map.get(variables.$label, margin, bottom, roomy);
  }
  @include _error-layout-state(label-margin-bottom, $layout-state);
}

@mixin label-margin-right($orientation-state) {
  // Single Line
  @if $orientation-state == single-line {
    margin-right: map.get(variables.$label, margin, right, single-line);
  }
  @include _error-orientation-state(label-margin-right, $orientation-state);
}

@mixin label-width($orientation-state) {
  // Default
  @if $orientation-state == default {
    max-width: 100%;
  }
  // Single Line
  @else if $orientation-state == single-line {
    flex: none;
  }
  @include _error-orientation-state(label-width, $orientation-state);
}

@mixin label-ellipsis {
  @include _ellipsis;
}

// Value

@mixin value-core {
  @include mdc-typography.typography(body1, $exclude-props: (font-size, line-height));
  line-height: 1.25rem;
}

@mixin value-font-size($layout-state) {
  // Default
  @if $layout-state == default {
    font-size: map.get(field-variables.$input, font-size, default);
  }
  // Roomy
  @else if $layout-state == roomy {
    font-size: map.get(field-variables.$input, font-size, roomy);
  }
  // Dense
  @else if $layout-state == dense {
    font-size: map.get(field-variables.$input, font-size, dense);
  }
  @include _error-layout-state(value-font-size, $layout-state);
}

@mixin value-width($orientation-state) {
  // Default
  @if $orientation-state == default {
    max-width: 100%;
  }
  // Single line
  @else if $orientation-state == single-line {
    flex: none;
  }
  @include _error-orientation-state(value-width, $orientation-state);
}

@mixin value-empty {
  @include mdc-theme.property(color, text-secondary-on-background);
  font-style: italic;
}

@mixin value-ellipsis {
  @include _ellipsis;
}

@mixin _ellipsis {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

@mixin _error-layout-state($mixin-name, $layout-state) {
  @if $layout-state != default
    and $layout-state != roomy
    and $layout-state != dense {
    @error 'mixin #{$mixin-name} must take a $layout-state arguement of [default, roomy, dense]. Got #{$layout-state}.';
  }
}

@mixin _error-align-state($mixin-name, $align-state) {
  @if $align-state != left
    and $align-state != center
    and $align-state != right {
    @error 'mixin #{$mixin-name} must take a $align-state arguement of [left, center, right]. Got #{$align-state}.';
  }
}

@mixin _error-orientation-state($mixin-name, $orientation-state) {
  @if $orientation-state != default
    and $orientation-state != single-line {
    @error 'mixin #{$mixin-name} must take a $orientation-state arguement of [default, single]. Got #{$orientation-state}.';
  }
}